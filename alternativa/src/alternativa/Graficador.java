package GraficadorTercerParcial;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import javax.swing.Icon;
import javax.swing.ImageIcon;
/**
 *
 * @author marisol
 */
public class Graficador extends javax.swing.JFrame {
    public int lineas,figura,lineasF,contador;
    public String tpoligono,tfigura,poligono,textura;
    public Color cT,cP,cF;
    public Icon icono;
    public ImageIcon icon;
    public File f;
    int ancho= 600,alto=600,medio=300,cuarto=150,tercio=450;
    //short x1c = 20, x2c = 280, x3c = 320, x4c = 580;
    //short y1c = 40, y2c = 300, y3c = 330, y4c = 590;

    /**
     * Creates new form grafica
     * @param lineas
     * @param lineasF
     * @param textura
     * @param tpoligono
     * @param tfigura
     * @param poligono
     * @param cT
     * @param cP
     * @param cF
     * @param figura
     * @param icono
     * @param icon
     * @param f
     */
    public Graficador(int lineas,int lineasF,String textura,String tpoligono,String tfigura,String poligono,Color cT,Color cP,Color cF,int figura,Icon icono,ImageIcon icon,File f) {
        this.lineas = lineas;
        this.cT = cT;
        this.tpoligono = tpoligono;
        this.figura = figura;
        this.lineasF = lineasF;
        this.tfigura = tfigura;
        this.cP = cP;
        this.icono = icono;
        this.icon = icon;
        this.f = f;
        this.poligono = poligono;
        this.cF = cF;
        this.textura = textura;
        initComponents(); 
        setLocationRelativeTo(null);
        setResizable(false);   
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    private Graficador() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 600, 600));
        setMinimumSize(new java.awt.Dimension(600, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        jLabel1.setFocusable(false);
        jLabel1.setMaximumSize(new java.awt.Dimension(600, 600));
        jLabel1.setMinimumSize(new java.awt.Dimension(600, 600));
        jLabel1.setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setBounds(0, 0, 600, 604);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Graficador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Graficador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Graficador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Graficador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Graficador().setVisible(true);
        });
    }
 
    @Override
    public void paint(Graphics g){
        super.paint(g); 
        int x = 600,y = 600;
        if (icon != null) {
        Image img = icon.getImage();
            g.drawImage(img, 0, 0, x, y, null);
        }
        contador = medio/lineas;
           
        g.setColor(cF);
        switch(poligono){
            case "Triangulo":
                int[] x0 = { 300, 170, 430 };
                int[] y0 = { 165, 390, 390 };
                if ("Contorno".equals(tpoligono)) {   
                    g.setColor(cF);
                    g.drawPolygon(x0, y0, 3);
                }
                if ("Solido".equals(tpoligono)) {
                    g.setColor(cF);
                    g.fillPolygon(x0, y0, 3);
                }
                break;

            case "Cuadrado":
                int [] x1 = {187,413,413,187};
                int [] y1 = {187,187,413,413};
                if ("Contorno".equals(tpoligono)) {   
                    g.setColor(cF);
                    g.drawPolygon(x1, y1, 4);
                }
                if ("Solido".equals(tpoligono)) {
                    g.setColor(cF);
                    g.fillPolygon(x1, y1, 4);
                }
                break;
            case "Pentágono":
                int [] x2 = {300, 420, 385, 215, 180};
                int [] y2 = {150, 270, 437, 437, 270};
                if ("Contorno".equals(tpoligono)) {   
                    g.setColor(cF);
                    g.drawPolygon(x2, y2, 5);
                }
                if ("Solido".equals(tpoligono)) {
                    g.setColor(cF);
                    g.fillPolygon(x2, y2, 5);
                }
                break;
            case "Hexágono":
                int[] x3 = {170, 170, 300, 430, 430, 300};
                int[] y3 = {225, 375, 450, 375, 225, 150};
                if ("Contorno".equals(tpoligono)) {   
                    g.setColor(cF);
                    g.drawPolygon(x3, y3, 6);
                }
                if ("Solido".equals(tpoligono)) {
                    g.setColor(cF);
                    g.fillPolygon(x3, y3, 6);
                }
                break;
            case "Heptágono":
                int[] x4 = {300, 190, 165, 235, 365, 435, 410};
                int[] y4 = {150, 210, 330, 440, 440, 330, 210};
                if ("Contorno".equals(tpoligono)) {   
                    g.setColor(cF);
                    g.drawPolygon(x4, y4, 7);
                }
                if ("Solido".equals(tpoligono)) {
                    g.setColor(cF);
                    g.fillPolygon(x4, y4, 7);
                }
                break;
            case "Octágono":
                int[] x5 = {160, 243, 357, 440, 440, 357, 243, 160};
                int[] y5 = {243, 160, 160, 243, 357, 440, 440, 357};
                if ("Contorno".equals(tpoligono)) {   
                    g.setColor(cF);
                    g.drawPolygon(x5, y5, 8);
                }
                if ("Solido".equals(tpoligono)) {
                    g.setColor(cF);
                    g.fillPolygon(x5, y5, 8);
                }
                break;
            case "Eneágono":
                int[] x6 = {395, 300, 200, 150, 160, 240, 360, 440, 450};
                int[] y6 = {180, 150, 180, 270, 370, 440, 440, 370, 270};
                if ("Contorno".equals(tpoligono)) {   
                    g.setColor(cF);
                    g.drawPolygon(x6, y6, 9);     
                }
                if ("Solido".equals(tpoligono)) {
                    g.setColor(cF);
                    g.fillPolygon(x6, y6, 9);
                }
                break;
            case "Decágono":
                int[] x7 = {160, 160, 220, 300, 385, 440, 440, 390, 300,210};
                int[] y7 = {340, 250, 180, 150, 180, 250, 340, 410, 450,410};
                if ("Contorno".equals(tpoligono)) {   
                    g.setColor(cF);
                    g.drawPolygon(x7, y7, 10);
                }
                if ("Solido".equals(tpoligono)) {
                    g.setColor(cF);
                    g.fillPolygon(x7, y7, 10);
                }
                break;
            }
                 
        if("Circulos".equals(tfigura))
        {
            int xC = 600;
            int yC = 600;
            
            int tamCirc = Math.min((xC-100) / lineasF, (yC-100) / lineasF);
            for (int i = 1; i <= lineasF; i++) {
            g.setColor(cP);
            int circS = 100 + i * tamCirc;
            int circX = Math.max((xC / 2) - (circS / 2), 0);
            int circY = Math.max((yC / 2) - (circS / 2), 0);
            g.drawOval(circX, circY, circS, circS);
        }
        }else if("Cuadrados".equals(tfigura))
        {
            int xCuad = 600;
            int yCuad = 600;
            int tamL = Math.min((xCuad-100) / lineasF, (yCuad-100) / lineasF);
            int margen = 10;
            int cS = Math.min(xCuad - 2 * margen, yCuad - 2 * margen);
            int cX = margen;
            int cY = margen;

            g.setColor(cP);
            g.drawRect(cX, cY+5, cS, cS);
            for (int i = 1; i <= lineasF; i++) {
                g.setColor(cP);
                int rectWidth = 100 + i * tamL;
                int rectHeight = 100 + i * tamL;
                int rectX = Math.max((xCuad / 2) - (rectWidth / 2), 0);
                int rectY = Math.max((yCuad / 2) - (rectHeight / 2), 0);
                g.drawRect(rectX, rectY, rectWidth, rectHeight);
                g.drawRect(0, 33, 600, 600);
            }
        } 
        
        if(textura.equals("Estrella")){
           g.setColor(cT);
           for (int i = 0; i < cuarto; i+=contador) {  
            
            if(lineas == 40 || lineas == 41 || lineas == 42 || lineas == 61 || lineas == 63 || lineas == 64 || lineas == 65 || lineas == 66 || lineas == 67 || lineas == 68 || lineas == 69 || lineas == 70 || lineas == 71 || lineas == 72 || lineas == 73 || lineas == 74 || lineas == 75)
            {
                g.drawLine(cuarto,i,cuarto-i,cuarto);
                g.drawLine(cuarto,i,cuarto+i,cuarto);
                g.drawLine(cuarto,medio-i,cuarto-i,cuarto);
                g.drawLine(cuarto,medio-i,cuarto+i,cuarto);
            }else{
                    g.drawLine(0,150,600,150);
                    g.drawLine(0,450,600,450);
                    g.drawLine(0,300,600,300);
                    g.drawLine(cuarto,i,cuarto-i,cuarto);
                    g.drawLine(cuarto,i,cuarto+i,cuarto);
                    g.drawLine(cuarto,medio-i,cuarto-i,cuarto);
                    g.drawLine(cuarto,medio-i,cuarto+i,cuarto);
                }  
           }
            for (int i = 0; i < cuarto; i+=contador) {     
            
                g.drawLine(medio + cuarto, i, medio - i + cuarto, cuarto);
                g.drawLine(medio + cuarto, i, medio + i + cuarto, cuarto);
                g.drawLine(medio + cuarto, medio - i, medio - i + cuarto, cuarto);
                g.drawLine(medio + cuarto, medio - i, medio + i + cuarto, cuarto);
                g.drawLine(tercio+i, 30, ancho-10, 35+i);
            }
            for (int i = 0; i < cuarto; i+=contador) {  
            
                g.drawLine(cuarto, medio + i, cuarto - i, medio + cuarto);
                g.drawLine(cuarto, medio + i, cuarto + i, medio + cuarto);
                g.drawLine(cuarto, alto - i, cuarto - i, medio + cuarto);
                g.drawLine(cuarto, alto - i, cuarto + i, medio + cuarto);
            }
            for (int i = 0; i < cuarto; i+=contador) {  
          
                g.drawLine(medio + cuarto, medio + i, medio - i + cuarto, medio + cuarto);
                g.drawLine(medio + cuarto, medio + i, medio + i + cuarto, medio + cuarto);
                g.drawLine(medio + cuarto, alto - i, medio - i + cuarto, medio + cuarto);
                g.drawLine(medio + cuarto, alto - i, medio + i + cuarto, medio + cuarto);
                g.drawLine(cuarto-i, 30, 10, 30+i);
            } 
           for(int i = 0; i < medio-150; i+=contador){
                g.drawLine(medio,150+i,medio-i,medio);
                g.drawLine(medio,150+i,medio+i,medio);
                g.drawLine(medio,ancho-150-i,medio-i,medio);
                g.drawLine(medio,ancho-150-i,medio+i,medio);
                g.drawLine(medio,cuarto-i,medio-i,medio-268);
                g.drawLine(medio,cuarto-i,medio+i,medio-268);
                g.drawLine(medio,450+i,medio-i,medio+295);
                g.drawLine(medio,450+i,medio+i,medio+295);
                g.drawLine(medio+290,150+i,medio+300-i,medio);
                g.drawLine(medio+290,ancho-150-i,medio+300-i,medio);
                g.drawLine(medio-290,150+i,medio-290+i,medio);
                g.drawLine(medio-290,ancho-150-i,medio-290+i,medio);
                g.drawLine(medio-290,450+i,medio-290+i,medio+295);
                g.drawLine(medio+290,450+i,medio+290-i,medio+295);
            }
        }
        g.setColor(cT);
        if(textura.equals("Diagonales"))
        {
            short x1c = 50, x2c = 250, x3c = 350, x4c = 550;
            short y1c = 50, y2c = 250, y3c = 350, y4c = 550;
            int contador2 = 200/lineas;

            g.drawLine(x1c,y1c,x2c,y1c);
            g.drawLine(x2c,y1c,x2c,y2c);
            g.drawLine(x2c,y2c,x1c,y2c);
            g.drawLine(x1c,y2c,x1c,y1c);

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x1c+i, y1c, x2c, y2c-i);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x1c, y1c+i, x2c-i, y2c);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x2c-i, y1c, x1c, y2c-i);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x2c, y1c+i, x1c+i, y2c);
            }

            g.drawLine(x3c,y1c,x4c,y1c);
            g.drawLine(x4c,y1c,x4c,y2c);
            g.drawLine(x4c,y2c,x3c,y2c);
            g.drawLine(x3c,y2c,x3c,y1c);

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x3c+i, y1c, x4c, y2c-i);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x3c, y1c+i, x4c-i, y2c);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x4c-i, y1c, x3c, y2c-i);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x4c, y1c+i, x3c+i, y2c);
            }

            g.drawLine(x1c,y3c,x2c,y3c);
            g.drawLine(x2c,y3c,x2c,y4c);
            g.drawLine(x2c,y4c,x1c,y4c);
            g.drawLine(x1c,y4c,x1c,y3c);

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x1c+i, y3c, x2c, y4c-i);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x1c, y3c+i, x2c-i, y4c);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x2c-i, y3c, x1c, y4c-i);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x2c, y3c+i, x1c+i, y4c);
            }

            g.drawLine(x3c,y3c,x4c,y3c);
            g.drawLine(x4c,y3c,x4c,y4c);
            g.drawLine(x4c,y4c,x3c,y4c);
            g.drawLine(x3c,y4c,x3c,y3c);

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x3c+i, y3c, x4c, y4c-i);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x3c, y3c+i, x4c-i, y4c);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x4c-i, y3c, x3c, y4c-i);
            }

            for (int i = 0; i < 200; i += contador2) {
                g.drawLine(x4c, y3c+i, x3c+i, y4c);
            }
        }
        
    }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}